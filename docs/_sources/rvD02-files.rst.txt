
**D.2 Files**
================== 

.. raw:: html

    <p id="api">&lt;i&gt;</p>

**[1]** File Types 
--------------------------------------------------------------------- 

.. raw:: html

    <hr>

**rivt file**

    *origin*: author input
    *folder*: report folder

*rivt files* are prepared by the author. Each *rivt file* has a prefix that
specifies the division label and subdivision number of the published *doc*.
*rivt reports* are assembled using *doc numbers* that organize the report into
divisions and subdivisions. The d*subdivision* name is taken from the
name that follows the *doc number*. It may be overridden in the *API
Meta function*. *Division* names are specified in the :term:`report script`.

The *doc number* prefix includes a single digit capital alphanumeric division
label *D*, followed by a two digit subdivision number *ss*. For example:

.. code-block:: bash
    
    [rvDss-]file-name.py
    
    rvC02-Beam-Loads.py

where the default doc name is "Beam Loads" in subdivision 2 of division C.
Hyphens are stripped from file name.

.. topic:: Note: 

    The following files are read and written by *rivtlib* when processing a 
    *rivt file*.  Files are labeled by origin and folder.

**Run file**

    *origin*: author input
    *folder*: src/    or user specified subfolder of /src
    *API function*:  *rv.R API*

A *run file* is a shell or command script executed using the | RUN |
command.

**Insert file**

    *origin*: author input
    *folder*: src/    or user specified subfolder of /src
    *API function*:  *rv.I API*

An *insert file* is an image, table or text file executed using 
the | IMAGE | , | TABLE | , or | TEXT | command.

**Value file**

    *origin*: author input
    *folder*: src/Values   or user specified subfolder of /src
    *API function*:  *rv.V API* 

    *origin*: program output
    *folder*: src/Values    
    *API function*:  *rv.V API* 

A *value file* is a *csv* file that defines variable values. It is imported
using the \| VALUE \| command. 

Values defined by equations and in a _[[VALUES]] block are written to a file
with the name composed of the *doc* and *section* number. The file may be read
by other *rivt files*.

**Tool file**

    *origin*: author input
    *folder*: src/Tools  or user specified subfolder of /src
    *API function*:  *rv.T API*

    *origin*: program output
    *folder*: src/Tools 
    *API function*:  *rv.T API*

A *tool file* can be executed using the | PYTHON | , | HTML | , | RST | 
or | LATEX | command. It may be used for analysis and generation of text, tables,
images and other content.  Executing a tool file may:

- define functions and classes for use in the *rivt file*
- generate images, tables and text for inclusion in the *doc*
- insert markup text into the *doc*

**Doc file**

    *origin*: program output
    *folder*: src/    or user specified subfolder of /src
    *API function*:  *rv.D API* 

Each *rivt file* outputs a *doc file* with the same *doc name and number* and
the selected *doc type* suffix. *Doc* files are written to the *publish folder*
as text, PDF or HTML files using | PUBLISH | command.

PDF files may be prepended or appended to the *doc* using the | APPEND |
command.

**Report file**

    *origin*: program output
    *folder*: publish/*subfolder*

A *report file* is generated by the Python *report script* and is written to
the designated *publish subfolder*. 

The *report file name* is taken from the
*report folder name* unless specified in the *report script*.

**Report script**

    *origin*: author input
    *folder*: publish/ 

The *report script* is a Python file that assembles the *report*. It specifies
the *docs* that should be included, whether the *rivt files* should be
re-executed along with other format settings.

**Public rivt file**

    *origin*: program output
    *folder*: public/

A public rivt file is a copy of the *rivt file* that includes all of the
sections marked as *public* in the *header*. It has the same name as the *rivt
file* with an added hyphen between "rv" and the docnumber e.g.
*rv-Dss-filename.py*

**Log file**

    *origin*: program output
    *folder*: logs/ 

*Log files* are written to the *log folder*. They include: 

- a backup of the rivt file
- a file listing the execution steps when processing the *rivt file* 
- a file listing each API function call with the header.

.. raw:: html

    <p id="api">&lt;i&gt;</p>

**[2]** Folders
--------------------------------------------------------------------- 

.. raw:: html

    <hr>

The *rivt report folder* organizes *log*, *public rivt files*, *sources*,
*docs* and *reports*. The top level folders are shown below. Brackets identify
the required prefix for a file or folder name.


.. code-block:: bash

    [rivt-]Report-Label/                Report Folder Name
        ├── [rv101-]filename1.py        | rivt file
        ├── [rv102-]filename2.py        | rivt file
        ├── [rv201-]filename3.py        | rivt file
        ├── [rv202-]filename4.py        | rivt file  
        ├── [logs]/                     || log folder
        ├── [public]/                   || public rivt folder
        ├── [publish]/                  || reports folder
        ├── [src]/                      |||| source folder
        └── README.txt                  || Searchable text report 

.. topic:: Note:

    When a *rivt file* is processed, the required folders are checked. If a
    required folder is missing it is created. 

The full report folder structure is :ref:`here. <full-report-folder>`

.. raw:: html

    <p id="api">&lt;i&gt;</p>

**[3]** Reports
----------------------------------------------------------

.. raw:: html

    <hr>

A :term:`report` is assembled from *docs*. Each :term:`rivt file` compiles to 
a *doc* organized by division and subdivision specified by .

A typical workflow for writing *reports* is to start with a similar *report*
and then edit the *rivt files* to produce new *docs*.

A *report* is generated by running a Python report script with settings
that specify assembly parameters and override defaults. One setting
provides the option to either regenerate all *docs* or to
assemble the report from previously generated *docs*.  Most aspects of
the *report* appearance are determined at when generating *docs*.

An example script is shown below.

.. code-block:: python

    #! python

    from rivtlib.rvreport import *  # noqa: F403

    """ generate a rivt report

    Sample report generating and config file. The report generating file must
    located in rivtdocs/reports/. The report output file is written to the same
    folder. Duplicate report file names are incremented, not overwritten. 

    Run this Python file to generate a rivt report. Copy and rename the file to
    save custom report settings. See rivtdocs/styles/rivt.ini for additional
    settings.

    A flag determines whether the report is assembled from existing doc files or
    whether docs are regenerated prior to assembly. (see "report type and paths"
    below). If a rivt or doc file is specified for inclusion and not found a
    warning is given but the report is still assembled.

    A rivt report organizes rivt folders into divisions, and rivt doc files as
    subdivisions. rivt doc numbers define this structure. Default titles for
    subdivisions and divisions are generated by stripping the doc or div number
    from the file or folder name and replacing underscores with spaces. The default
    titles may be overridden (see "optional rename" below). """

    # ==================================
    # report type
    # ==================================
    rptype = "rstpdf"  # report type [html; rstpdf; texpdf; text]
    rvrun = False  # regenerate docs [True; False]

    # ==================================
    # report cover settings
    # ==================================
    # cover pages are located in rivtdocs/styles
    rptitle = "Solar Canopy Calculations"
    rpsubtitle = "Larkspur, Ca"
    rpauthor = "rhh"
    rpdate = "<datetime>"
    rptoc = True  # add table of contents, "" to omit
    rpcover = "cover1.pdf"  # cover page [name.rst; name.pdf], "" to omit

    # ==================================
    # include docs / rename titles
    # ==================================
    # include these divisions in report
    dv01 = "Codes and Loads"  # override division title
    dv02 = ""  # use default division title from folder name
    dv03 = "Foundation"

    # include these docs in report
    rv0101 = "Codes"  # override doc (subdivision) title in report
    rv0102 = ""  # use default subdivision title from file name
    rv0201 = "Steel Frame"
    rv0202 = "Solar Panels"
    rv0301 = "Slab"
    rv0302 = "Walls"

    genreport()  # noqa: F405

